#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_PRODUTO 100

struct produto {
    char nome[100];
    char descricao[50];
    char codProduto[13];
    double preco;
    int quantidade_em_estoque;
};

struct produto estoquehotel[MAX_PRODUTO];
int numProdutos = 0;

//Função usada ao cadastrar um produto
void ler_dados(int posicao) {
    char search[13];
    int false = 0;

    if (posicao < 0 || posicao >= MAX_PRODUTO) {
        printf("Posicao invalida.\n");
        return;
    }

    struct produto *produto = &estoquehotel[posicao];

    printf("\nDigite o COD do produto: ");
    scanf("%s", search);

    // Checar se há o codigo de produto cadastrado
    for(int i=0; i<=numProdutos; i++)
    {
        struct produto *produto = &estoquehotel[i];
        if (strcmp(search, produto->codProduto) == 0){
            printf("\n Codigo de produto ja existente\n");
            false = false +1;
        }

    }

    if (false == 0){
        strcpy(produto->codProduto, search);

        printf("\nDigite o nome do produto: ");
        scanf(" %[^\n]", produto->nome);

        printf("\nDigite a descricao do produto: ");
        scanf(" %[^\n]", produto->descricao);

        printf("\nDigite o preco do produto: ");
        scanf("%lf", &produto->preco);

        printf("\nDigite a quantidade em estoque: ");
        scanf("%d", &produto->quantidade_em_estoque);

        printf("\nProduto cadastrado com sucesso!\n");
    }

}

// Função utilizada em conjunto com Imprimir_tudo para exibir todos os produtos cadastrados
void imprimir_unico(int posicao) {
    if (posicao < 0 || posicao >= numProdutos) {
        printf("Posicao invalida! \n");
        return;
    }

    struct produto *produto = &estoquehotel[posicao];

    printf("Nome: %s\n", produto->nome);
    printf("Descricao: %s\n", produto->descricao);
    printf("COD: %s\n", produto->codProduto);
    printf("Preco: %.2lf\n", produto->preco);
    printf("Quantidade em estoque: %d\n", produto->quantidade_em_estoque);
}

void imprimir_tudo() {
    if (numProdutos == 0) {
        printf("Nenhum produto cadastrado.\n");
        return;
    }

    printf("Detalhes de todos os produtos:\n");
    for (int i = 0; i < numProdutos; i++) {
        printf("Produto %d:\n", i + 1);
        imprimir_unico(i);
        printf("\n");
    }
}

//Função para imprimir apenas um produto pelo codigo digitado pelo usuario
void imprimir_individual(char pesquisa[13]) {
    int posicao = 0;
    int true= 0;
    for(int i=0; i<=numProdutos; i++)
    {
        struct produto *produto = &estoquehotel[i];
        if (strcmp(pesquisa, produto->codProduto) == 0){

            struct produto *produto = &estoquehotel[posicao];

            printf("\n");
            printf("Nome: %s\n", produto->nome);
            printf("Descricao: %s\n", produto->descricao);
            printf("COD: %s\n", produto->codProduto);
            printf("Preco: %.2lf\n", produto->preco);
            printf("Quantidade em estoque: %d\n", produto->quantidade_em_estoque);

            true = true +1;
            break;
        }else{
            posicao = posicao + 1;
        }

    }
    // Usar a variavel booleana para checar se o codigo anterior foi executado ou não
    if (true == 0){
        printf("\n Codigo de produto nao existente");
    }


}

//Tela principal onde irá ter a estrutura dos codigos e puxar as funções feitas acima
int main() {
    int opcao;
    int soma;
    char pesquisa[13];
    int boleana = 0;

    // Menu principal onde o usuario poderá acessar cada funcionalidade do programa
    do {
        printf("\nMenu Principal:\n");
        printf("1. Cadastrar um novo produto\n");
        printf("2. Imprimir detalhes de um produto especifico\n");
        printf("3. Imprimir detalhes de todos os produtos no estoque\n");
        printf("4. Adicionar quantidade produto\n");
        printf("5. Remover quantidade produto\n");
        printf("6. Sair\n");

        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);

        switch (opcao) {
            // Função para cadastrar o produto
            case 1:
                if (numProdutos < MAX_PRODUTO) {
                    ler_dados(numProdutos);
                    numProdutos++;

                } else {
                    printf("\nLimite de produtos atingido.\n");

                }
                break;
            // Função para buscar apenas um produto pelo codigo cadastrado
            case 2:
                if (numProdutos > 0) {
                    printf("Digite o codigo do produto: ");
                    scanf("%s", pesquisa);
                    imprimir_individual(pesquisa);
                } else {
                    printf("Nenhum produto cadastrado.\n");
                }
                break;
            // Função para imprimir todos os produtos cadastrados
            case 3:
                imprimir_tudo();
                break;

            // Função para adicionar uma certa quantidade ao produto cadastrado
            case 4:
                printf("Qual o Cod do produto que voce deseja adicionar quantidade?\n");
                scanf("%s", pesquisa);

                //Codigo para buscar nos produtos cadastrado se há o valor digitado pelo usuario e adcionar a quantidade
                for(int i=0; i<=numProdutos; i++)
                {
                    struct produto *produto = &estoquehotel[i];
                    if (strcmp(pesquisa, produto->codProduto) == 0){
                        printf("Digite a quantidade do produto que deseja adicionar:\n");
                        scanf("%d", &soma);
                        produto->quantidade_em_estoque += soma;
                        boleana = boleana +1;
                        printf("\n Quantidade atualizada!");
                        break;
                    }

                }
                // Usar a variavel booleana para checar se o codigo anterior foi executado ou não
                if (boleana == 0){
                    printf("\n Codigo de produto nao existente");
                 }
                break;

                // Função para subtrair uma certa quantidade ao produto cadastrado
            case 5:
                printf("Qual o Cod do produto que voce deseja remover quantidade?\n");
                scanf("%s", pesquisa);

                //Codigo para buscar nos produtos cadastrado se há o valor digitado pelo usuario e remover a quantidade
                for(int i=0; i<=numProdutos; i++)
                {
                    struct produto *produto = &estoquehotel[i];
                    if (strcmp(pesquisa, produto->codProduto) == 0){
                        printf("Digite a quantidade do produto que deseja remover:\n");
                        scanf("%d", &soma);
                        produto->quantidade_em_estoque -= soma;
                        boleana = boleana +1;
                        printf("\n Quantidade atualizada!\n");
                        break;
                    }

                }
                // Usar a variavel booleana para checar se o codigo anterior foi executado ou não
                if (boleana == 0){
                    printf("\n Codigo de produto nao existente");
                }
                break;

            //Fechar o programa
            case 6:
                printf("\nFechando o sistema!\n");
                (void)system("C:\\PROJETO_HOTEL\\Hotel_Maresia.exe");
                break;
            default:
                printf("Opcao invalida! Tente novamente\n");
        }
    } while (opcao != 6);

    return 0;
}